@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

# Find required dependencies
find_dependency(glm CONFIG REQUIRED)
find_dependency(nlohmann_json CONFIG REQUIRED)
# Add other shared dependencies as needed

# Include our targets
include("${CMAKE_CURRENT_LIST_DIR}/IonTargets.cmake")

# Recreate the build interface for consumers
if(NOT TARGET ion::build)
    add_library(ion_build INTERFACE IMPORTED)
    set_target_properties(ion_build PROPERTIES
        INTERFACE_COMPILE_FEATURES cxx_std_23
    )
    add_library(ion::build ALIAS ion_build)
endif()

# Define available components
set(ion_AVAILABLE_COMPONENTS core crypto asset physics audio protocol render ui)

# Check requested components
foreach(_comp ${ion_FIND_COMPONENTS})
    if(NOT _comp IN_LIST ion_AVAILABLE_COMPONENTS)
        set(ion_FOUND FALSE)
        set(ion_NOT_FOUND_MESSAGE "Unsupported component: ${_comp}")
    endif()
    
    # Check if the target exists
    if(NOT TARGET ion::${_comp})
        set(ion_${_comp}_FOUND FALSE)
        if(ion_FIND_REQUIRED_${_comp})
            set(ion_FOUND FALSE)
            set(ion_NOT_FOUND_MESSAGE "Required component not found: ${_comp}")
        endif()
    else()
        set(ion_${_comp}_FOUND TRUE)
    endif()
endforeach()

check_required_components(ion)